{"version":3,"sources":["TodoList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["TodoList","props","useState","newTitle","setNewTitle","error","setError","tasks","map","task","key","id","type","onChange","e","changeTaskStatus","currentTarget","checked","isDone","className","title","onClick","removeTask","addTask","trim","removeTodoList","value","onKeyPress","ctrlKey","charCode","filter","changeFilter","App","todoList1","v1","todoList2","todoLists","setTodoLists","setTasks","taskID","todoListID","newTodoList","newTask","todoList","taskId","t","todoListId","find","tl","taskForTodoList","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.10b83f4c.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {FilterValuesType} from \"./App\";\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype TodoListType = {\r\n    key: string\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    filter: FilterValuesType\r\n    addTask: (taskTitle: string, todoListID: string) => void\r\n    removeTask: (taskId: string, todoListID: string) => void\r\n    changeFilter: (value: FilterValuesType, todoListId: string) => void\r\n    removeTodoList: (todoListID: string) => void\r\n    changeTaskStatus: (taskID: string, isDone: boolean, todoListId: string) => void\r\n}\r\n\r\n\r\nexport function TodoList(props: TodoListType) {\r\n\r\n    const [newTitle, setNewTitle] = useState<string>(\"\")\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n    let tasks = props.tasks.map(task => {\r\n\r\n        const onClickHandler = () => props.removeTask(task.id, props.id)\r\n        const changeStatus = (e: ChangeEvent<HTMLInputElement>) => {\r\n            props.changeTaskStatus(task.id, e.currentTarget.checked, props.id)\r\n        }\r\n\r\n\r\n        return (\r\n            <li key={task.id}\r\n            >\r\n                <input\r\n                    type=\"checkbox\"\r\n                    onChange={changeStatus}\r\n                    checked={task.isDone}/>\r\n                <span className={task.isDone ? \"is-done\" : \"\"}>{task.title}</span>\r\n                <button onClick={onClickHandler}>-\r\n                </button>\r\n            </li>\r\n        )\r\n    })\r\n\r\n    const addTask = () => {\r\n        if (newTitle.trim()) {\r\n            props.addTask(newTitle.trim(), props.id)\r\n            setNewTitle(\"\")\r\n        } else {\r\n            setError(\"Title is required\")\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setNewTitle(e.currentTarget.value)\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null)\r\n        if (e.ctrlKey && e.charCode === 13) {\r\n            addTask()\r\n        }\r\n    }\r\n\r\n    const removeTodoList = () => props.removeTodoList(props.id)\r\n\r\n\r\n    const onAllClickHandler = () => {\r\n        props.changeFilter(\"all\", props.id)\r\n    }\r\n    const onActiveClickHandler = () => props.changeFilter(\"active\", props.id)\r\n    const onCompletedClickHandler = () => props.changeFilter(\"completed\", props.id)\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h3>{props.title}\r\n                <button onClick={removeTodoList}>X</button>\r\n            </h3>\r\n            <div>\r\n                <input\r\n                    value={newTitle}\r\n                    onChange={onChangeHandler}\r\n                    onKeyPress={onKeyPressHandler}\r\n                    className={error ? \"error\" : \"\"}\r\n                />\r\n                <button onClick={addTask}>+</button>\r\n                {error && <div className={\"error-message\"}>{error}</div>}\r\n            </div>\r\n            <ul>\r\n                {tasks}\r\n            </ul>\r\n            <div>\r\n                <button\r\n                    className={props.filter === \"all\" ? \"active-filter\" : \"\"}\r\n                    onClick={onAllClickHandler}>All\r\n                </button>\r\n                <button\r\n                    className={props.filter === \"active\" ? \"active-filter\" : \"\"}\r\n                    onClick={onActiveClickHandler}>Active\r\n                </button>\r\n                <button\r\n                    className={props.filter === \"completed\" ? \"active-filter\" : \"\"}\r\n                    onClick={onCompletedClickHandler}>Completed\r\n                </button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {useState} from 'react';\r\nimport './App.scss';\r\nimport {TaskType, TodoList} from \"./TodoList\";\r\nimport {v1} from \"uuid\";\r\n\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\"\r\n\r\nexport type TodoListType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\ntype TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nfunction App() {\r\n    // const [tasks, setTasks] = useState<Array<TaskType>>(\r\n    //     [\r\n    //         {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n    //         {id: v1(), title: \"JS\", isDone: true},\r\n    //         {id: v1(), title: \"ReactJS\", isDone: false},\r\n    //         {id: v1(), title: \"Redux\", isDone: false},\r\n    //         {id: v1(), title: \"SCSS\", isDone: true}\r\n    //     ]);\r\n\r\n    const todoList1 = v1()\r\n    const todoList2 = v1()\r\n\r\n    const [todoLists, setTodoLists] = useState<Array<TodoListType>>([\r\n        {id: todoList1, title: \"What to learn\", filter: \"all\"},\r\n        {id: todoList2, title: \"What to buy\", filter: \"active\"},\r\n    ])\r\n\r\n    const [tasks, setTasks] = useState<TasksStateType>({\r\n        [todoList1]: [\r\n            {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n            {id: v1(), title: \"JS\", isDone: true},\r\n            {id: v1(), title: \"ReactJS\", isDone: false}\r\n        ],\r\n        [todoList2]: [\r\n            {id: v1(), title: \"Bear\", isDone: true},\r\n            {id: v1(), title: \"Fish\", isDone: true},\r\n            {id: v1(), title: \"Milk\", isDone: false}\r\n        ]\r\n    })\r\n\r\n\r\n    // function changeTaskStatus(taskID: string, isDone: boolean,todoListID: string ) {\r\n    //     const todoList = tasks[todoListID]\r\n    //     let task = todoList.find(task => task.id === taskID)\r\n    //     if (task) {\r\n    //         task.isDone = isDone;\r\n    //         setTasks({...tasks})\r\n    //     }\r\n    // }\r\n\r\n    function changeTaskStatus(taskID: string, isDone: boolean, todoListID: string) {\r\n        const todoList = tasks[todoListID]\r\n        const newTodoList = todoList.map(task => {\r\n            if (task.id === taskID) {\r\n                return {...task, isDone: isDone}\r\n            }\r\n            return task\r\n        })\r\n        tasks[todoListID] = newTodoList\r\n        setTasks({...tasks})\r\n    }\r\n\r\n\r\n    function addTask(title: string, todoListID: string) {\r\n        const newTask: TaskType = {id: v1(), title: title, isDone: false}\r\n        const todoList = tasks[todoListID]\r\n        tasks[todoListID] = [newTask, ...todoList]\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    function removeTask(taskId: string, todoListID: string) {\r\n        const todoList = tasks[todoListID]\r\n        tasks[todoListID] = todoList.filter(t => t.id !== taskId)\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    function changeFilter(value: FilterValuesType, todoListId: string) {\r\n        const todoList = todoLists.find(tl => tl.id === todoListId)\r\n        if (todoList) {\r\n            todoList.filter = value\r\n            setTodoLists([...todoLists])\r\n        }\r\n    }\r\n\r\n    function removeTodoList(todoListID: string) {\r\n        setTodoLists(todoLists.filter(tl => tl.id !== todoListID))\r\n        delete tasks[todoListID]\r\n        // setTasks({...tasks})\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            {\r\n                todoLists.map(tl => {\r\n\r\n                    let taskForTodoList = tasks[tl.id];\r\n                    if (tl.filter === \"active\") {\r\n                        taskForTodoList = tasks[tl.id].filter(t => t.isDone === false)\r\n                    }\r\n                    if (tl.filter === \"completed\") {\r\n                        taskForTodoList = tasks[tl.id].filter(t => t.isDone === true)\r\n                    }\r\n                    return (\r\n                        <TodoList\r\n                            key={tl.id}\r\n                            id={tl.id}\r\n                            title={tl.title}\r\n                            filter={tl.filter}\r\n                            tasks={taskForTodoList}\r\n                            addTask={addTask}\r\n                            removeTask={removeTask}\r\n                            changeFilter={changeFilter}\r\n                            removeTodoList={removeTodoList}\r\n                            changeTaskStatus={changeTaskStatus}\r\n\r\n                        />\r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}