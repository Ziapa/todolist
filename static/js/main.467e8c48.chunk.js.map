{"version":3,"sources":["serviceWorker.ts","AddItemForm.tsx","state/todolist-reducer.ts","EditableSpan.tsx","state/tasks-reducer.ts","TodoList.tsx","AppWithRedux.tsx","redux/redux-store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","AddItemForm","props","addItem","newTitle","trim","setNewTitle","setError","useState","error","TextField","size","variant","value","onChange","e","currentTarget","onKeyPress","key","label","helperText","IconButton","color","onClick","AddBox","todolistId1","v1","todolistId2","initialState","id","title","filter","EditableSpan","editMode","setEditMode","setTitle","autoFocus","onBlur","onDoubleClick","isDone","TodoList","dispatch","useDispatch","changeFilter","todolistId","type","changeTodolistTitleAC","Delete","addTaskAC","tasks","map","t","className","Checkbox","checked","newIsDoneValue","taskId","changeTaskStatusAC","newValue","changeTaskTitleAC","removeTaskAC","style","paddingTop","Button","AppWithRedux","todoLists","useSelector","state","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","Grid","container","padding","addTodolistAC","spacing","tl","allTodolistTasks","tasksForTodolist","item","Paper","reducers","combineReducers","action","stateCopy","newTasks","newTask","todolistTasks","task","find","copyState","todolist","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.467e8c48.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (newTitle: string) => void\r\n}\r\n\r\nexport const AddItemForm = (props: AddItemFormPropsType) => {\r\n\r\n    const addItem = () => {\r\n        if (newTitle.trim()) {\r\n            props.addItem(newTitle.trim())\r\n            setNewTitle(\"\")\r\n        } else {\r\n            setError(\"Title is required\")\r\n        }\r\n    }\r\n\r\n    const [newTitle, setNewTitle] = useState<string>(\"\")\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setNewTitle(e.currentTarget.value)\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null)\r\n        if (e.key === \"Enter\") {\r\n            addItem()\r\n        }\r\n    }\r\n    return (\r\n        <div>\r\n            {/*<input*/}\r\n            {/*    value={newTitle}*/}\r\n            {/*    onChange={onChangeHandler}*/}\r\n            {/*    onKeyPress={onKeyPressHandler}*/}\r\n            {/*    className={error ? \"error\" : \"\"}*/}\r\n            {/*/>*/}\r\n            {/*<button onClick={addItem}>+</button>*/}\r\n            <TextField\r\n                size={\"small\"}\r\n                variant={\"outlined\"}\r\n                value={newTitle}\r\n                onChange={onChangeHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n                error={!!error}\r\n                label={\"Title\"}\r\n                helperText={error}\r\n            />\r\n            <IconButton color={\"primary\"} onClick={addItem}>\r\n                <AddBox/>\r\n            </IconButton>\r\n            {/*<Button variant={\"contained\"} color={\"primary\"} onClick={addItem}>+</Button>*/}\r\n            {/*{error && <div className={\"error-message\"}>{error}</div>}*/}\r\n        </div>\r\n    )\r\n}","import {FilterValuesType, TodolistType} from '../AppWithRedux';\r\nimport {v1} from 'uuid';\r\n\r\nexport type RemoveTodolistActionType = {\r\n    type: 'REMOVE-TODOLIST',\r\n    id: string\r\n}\r\nexport type AddTodolistActionType = {\r\n    type: 'ADD-TODOLIST',\r\n    title: string\r\n    todolistId: string\r\n}\r\nexport type ChangeTodolistTitleActionType = {\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id: string\r\n    title: string\r\n}\r\nexport type ChangeTodolistFilterActionType = {\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id: string\r\n    filter: FilterValuesType\r\n}\r\n\r\ntype ActionsType = RemoveTodolistActionType | AddTodolistActionType\r\n    | ChangeTodolistTitleActionType\r\n    | ChangeTodolistFilterActionType\r\n\r\nexport let todolistId1 = v1();\r\nexport let todolistId2 = v1();\r\n\r\nconst initialState: Array<TodolistType> =\r\n    [\r\n        {id: todolistId1, title: \"What to learn\", filter: \"all\"},\r\n        {id: todolistId2, title: \"What to buy\", filter: \"all\"}\r\n    ]\r\n\r\nexport const todoListsReducer = (state: Array<TodolistType> = initialState, action: ActionsType): Array<TodolistType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST': {\r\n            return state.filter(tl => tl.id != action.id)\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            return [{\r\n                id: action.todolistId,\r\n                title: action.title,\r\n                filter: 'all'\r\n            }, ...state]\r\n        }\r\n        case 'CHANGE-TODOLIST-TITLE': {\r\n            const todolist = state.find(tl => tl.id === action.id);\r\n            if (todolist) {\r\n                // если нашёлся - изменим ему заголовок\r\n                todolist.title = action.title;\r\n            }\r\n            return [...state]\r\n        }\r\n        case 'CHANGE-TODOLIST-FILTER': {\r\n            const todolist = state.find(tl => tl.id === action.id);\r\n            if (todolist) {\r\n                // если нашёлся - изменим ему заголовок\r\n                todolist.filter = action.filter;\r\n            }\r\n            return [...state]\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const removeTodolistAC = (todolistId: string): RemoveTodolistActionType => {\r\n    return {type: 'REMOVE-TODOLIST', id: todolistId}\r\n}\r\nexport const addTodolistAC = (title: string): AddTodolistActionType => {\r\n    return {type: 'ADD-TODOLIST', title: title, todolistId: v1()}\r\n}\r\nexport const changeTodolistTitleAC = (id: string, title: string): ChangeTodolistTitleActionType => {\r\n    return {type: 'CHANGE-TODOLIST-TITLE', id: id, title: title}\r\n}\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType): ChangeTodolistFilterActionType => {\r\n    return {type: 'CHANGE-TODOLIST-FILTER', id: id, filter: filter}\r\n}\r\n\r\n","import React, {ChangeEvent, useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (title:string) => void\r\n}\r\n\r\nexport function EditableSpan(props: EditableSpanPropsType) {\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [title, setTitle] = useState<string>(props.value)\r\n    const onEditMode = () => setEditMode(true)\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n      if (title.trim()) {\r\n          props.onChange(title.trim())\r\n      }\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => setTitle(e.currentTarget.value)\r\n\r\n    return editMode ?\r\n\r\n                <TextField\r\n                    autoFocus\r\n                    size={\"small\"}\r\n                    value={title}\r\n                    onBlur={offEditMode}\r\n                    variant={\"filled\"}\r\n                    onChange={changeTitle}\r\n                />\r\n                :\r\n                <span onDoubleClick={onEditMode}> {title}</span>\r\n\r\n}","import {TasksStateType} from '../AppWithRedux';\r\nimport {TaskType} from '../TodoList';\r\nimport {v1} from 'uuid';\r\nimport {AddTodolistActionType, RemoveTodolistActionType, todolistId1, todolistId2} from './todolist-reducer';\r\n\r\nexport type RemoveTaskActionType = {\r\n    type: 'REMOVE-TASK',\r\n    todolistId: string\r\n    taskId: string\r\n}\r\n\r\nexport type AddTaskActionType = {\r\n    type: 'ADD-TASK',\r\n    todolistId: string\r\n    title: string\r\n}\r\n\r\nexport type ChangeTaskStatusActionType = {\r\n    type: 'CHANGE-TASK-STATUS',\r\n    todolistId: string\r\n    taskId: string\r\n    isDone: boolean\r\n}\r\n\r\nexport type ChangeTaskTitleActionType = {\r\n    type: 'CHANGE-TASK-TITLE',\r\n    todolistId: string\r\n    taskId: string\r\n    title: string\r\n}\r\n\r\ntype ActionsType = RemoveTaskActionType | AddTaskActionType\r\n    | ChangeTaskStatusActionType\r\n    | ChangeTaskTitleActionType\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n\r\nconst initialState: TasksStateType = {\r\n    [todolistId1]: [\r\n        {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n        {id: v1(), title: \"JS\", isDone: true}\r\n    ],\r\n    [todolistId2]: [\r\n        {id: v1(), title: \"Milk\", isDone: true},\r\n        {id: v1(), title: \"React Book\", isDone: true}\r\n    ]\r\n}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK': {\r\n            const stateCopy = {...state}\r\n            const tasks = stateCopy[action.todolistId];\r\n            const newTasks = tasks.filter(t => t.id != action.taskId);\r\n            stateCopy[action.todolistId] = newTasks;\r\n            return stateCopy;\r\n        }\r\n        case 'ADD-TASK': {\r\n            const stateCopy = {...state}\r\n            const newTask: TaskType = {\r\n                id: v1(),\r\n                title: action.title,\r\n                isDone: false\r\n            }\r\n            const tasks = stateCopy[action.todolistId];\r\n            const newTasks = [newTask, ...tasks];\r\n            stateCopy[action.todolistId] = newTasks;\r\n            return stateCopy;\r\n        }\r\n        case 'CHANGE-TASK-STATUS': {\r\n            let todolistTasks = state[action.todolistId];\r\n            // найдём нужную таску:\r\n            let task = todolistTasks.find(t => t.id === action.taskId);\r\n            //изменим таску, если она нашлась\r\n            if (task) {\r\n                task.isDone = action.isDone;\r\n            }\r\n            return ({...state});\r\n        }\r\n        case 'CHANGE-TASK-TITLE': {\r\n            let todolistTasks = state[action.todolistId];\r\n            // найдём нужную таску:\r\n            let task = todolistTasks.find(t => t.id === action.taskId);\r\n            //изменим таску, если она нашлась\r\n            if (task) {\r\n                task.title = action.title;\r\n            }\r\n            return ({...state});\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: []\r\n            }\r\n        }\r\n        case 'REMOVE-TODOLIST': {\r\n            const copyState = {...state};\r\n            delete copyState[action.id];\r\n            return copyState;\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const removeTaskAC = (taskId: string, todolistId: string): RemoveTaskActionType => {\r\n    return {type: 'REMOVE-TASK', taskId: taskId, todolistId: todolistId}\r\n}\r\nexport const addTaskAC = (title: string, todolistId: string): AddTaskActionType => {\r\n    return {type: 'ADD-TASK', title, todolistId}\r\n}\r\nexport const changeTaskStatusAC = (taskId: string, isDone: boolean, todolistId: string): ChangeTaskStatusActionType => {\r\n    return {type: 'CHANGE-TASK-STATUS', isDone, todolistId, taskId}\r\n}\r\nexport const changeTaskTitleAC = (taskId: string, title: string, todolistId: string): ChangeTaskTitleActionType => {\r\n    return {type: 'CHANGE-TASK-TITLE', title, todolistId, taskId}\r\n}\r\n\r\n","import React, {ChangeEvent} from 'react';\r\nimport {FilterValuesType} from './AppWithRedux';\r\nimport {AddItemForm} from './AddItemForm';\r\nimport {EditableSpan} from './EditableSpan';\r\nimport {Button, Checkbox, IconButton} from '@material-ui/core';\r\nimport {Delete} from '@material-ui/icons';\r\nimport {useDispatch} from \"react-redux\";\r\nimport {addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC} from \"./state/tasks-reducer\";\r\nimport {changeTodolistFilterAC, changeTodolistTitleAC, removeTodolistAC} from \"./state/todolist-reducer\";\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport function TodoList(props: PropsType) {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    function changeStatus(id: string, isDone: boolean, todolistId: string) {\r\n        dispatch(changeTaskStatusAC(id, isDone, todolistId));\r\n    }\r\n\r\n    function removeTask(id: string, todolistId: string) {\r\n        dispatch(removeTaskAC(id, todolistId));\r\n    }\r\n\r\n    const addTask = (title: string) => {\r\n        dispatch(addTaskAC(title, props.id));\r\n    }\r\n\r\n    function removeTodolist() {\r\n        dispatch(removeTodolistAC(props.id));\r\n    }\r\n\r\n    function changeTaskTitle(id: string, newTitle: string, todolistId: string) {\r\n        dispatch(changeTaskTitleAC(id, newTitle, todolistId));\r\n    }\r\n\r\n    const changeTodolistTitle = (title: string) => {\r\n        dispatch(changeTodolistTitleAC(props.id, title));\r\n    }\r\n\r\n    function changeFilter(value: FilterValuesType, todolistId: string) {\r\n        dispatch(changeTodolistFilterAC(todolistId, value));\r\n    }\r\n\r\n    const onAllClickHandler = () => changeFilter(\"all\", props.id);\r\n    const onActiveClickHandler = () => changeFilter(\"active\", props.id);\r\n    const onCompletedClickHandler = () => changeFilter(\"completed\", props.id);\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask}/>\r\n        <div>\r\n            {\r\n                props.tasks.map(t => {\r\n                    const onClickHandler = () => removeTask(t.id, props.id)\r\n                    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n                        let newIsDoneValue = e.currentTarget.checked;\r\n                        changeStatus(t.id, newIsDoneValue, props.id);\r\n                    }\r\n                    const onTitleChangeHandler = (newValue: string) => {\r\n                        changeTaskTitle(t.id, newValue, props.id);\r\n                    }\r\n\r\n\r\n                    return <div key={t.id} className={t.isDone ? \"is-done\" : \"\"}>\r\n                        <Checkbox\r\n                            checked={t.isDone}\r\n                            color=\"primary\"\r\n                            onChange={onChangeHandler}\r\n                        />\r\n\r\n                        <EditableSpan value={t.title} onChange={onTitleChangeHandler}/>\r\n                        <IconButton onClick={onClickHandler}>\r\n                            <Delete/>\r\n                        </IconButton>\r\n                    </div>\r\n                })\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: \"10px\"}}>\r\n            <Button variant={props.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport './App.scss';\r\nimport {AddItemForm} from './AddItemForm';\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from '@material-ui/core';\r\nimport {Menu} from '@material-ui/icons';\r\nimport {addTodolistAC} from './state/todolist-reducer';\r\nimport {TaskType, TodoList} from \"./TodoList\";\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppStateType} from \"./redux/redux-store\";\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n\r\nexport function AppWithRedux() {\r\n\r\n\r\n    const dispatch = useDispatch()\r\n    const todoLists = useSelector<AppStateType, Array<TodolistType>>(state => state.todoLists)\r\n    const tasks = useSelector<AppStateType, TasksStateType>(state => state.tasks)\r\n\r\n    function addTodolist(title: string) {\r\n        dispatch(addTodolistAC(title));\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: \"20px\"}}>\r\n                    <AddItemForm addItem={addTodolist}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {\r\n                        todoLists.map(tl => {\r\n                            let allTodolistTasks = tasks[tl.id];\r\n                            let tasksForTodolist = allTodolistTasks;\r\n\r\n                            if (tl.filter === \"active\") {\r\n                                tasksForTodolist = allTodolistTasks.filter(t => !t.isDone);\r\n                            }\r\n                            if (tl.filter === \"completed\") {\r\n                                tasksForTodolist = allTodolistTasks.filter(t => t.isDone);\r\n                            }\r\n\r\n                            return <Grid item>\r\n                                <Paper style={{padding: \"10px\"}}>\r\n                                    <TodoList\r\n                                        key={tl.id}\r\n                                        id={tl.id}\r\n                                        title={tl.title}\r\n                                        tasks={tasksForTodolist}\r\n                                        filter={tl.filter}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}","import {combineReducers, createStore} from \"redux\";\r\nimport {tasksReducer} from \"../state/tasks-reducer\";\r\nimport {todoListsReducer} from \"../state/todolist-reducer\";\r\n\r\nlet reducers = combineReducers({\r\n    tasks: tasksReducer,\r\n    todoLists: todoListsReducer\r\n})\r\n\r\ntype ReducerType = typeof reducers\r\nexport  type AppStateType = ReturnType<ReducerType>\r\n\r\nexport let store = createStore(reducers)\r\n\r\n\r\n// @ts-ignore\r\nwindow.store = store\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {AppWithRedux} from \"./AppWithRedux\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./redux/redux-store\";\r\n\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <AppWithRedux/>\r\n    </Provider>\r\n    , document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}